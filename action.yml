name: 'Poetry tag version bump'
description: 'Detect version bump and tag the commit'
# inputs:
#   who-to-greet:  # id of input
#     description: 'Who to greet'
#     required: true
#     default: 'World'
outputs:
  should_publish: # id of output
    description: 'New tag created'
    value: ${{ steps.check.outputs.result }}
runs:
  using: 'composite'
  steps:
  - uses: actions/setup-node@v3
    with:
      node-version: 20
  - run: npm install toml@3.0.0
    shell: bash
  - name: Ensure tag for version bump
    id: check
    uses: actions/github-script@v7
    with:
      script: |
        const toml = require('toml')
        async function getVersion(ref) {
          try {
            response = await github.rest.repos.getContent({
              repo: context.repo.repo,
              owner: context.repo.owner,
              path: 'pyproject.toml',
              ref: ref
            });
            return toml.parse(Buffer.from(response.data.content, 'base64').toString())
              .tool
              .poetry
              .version;
          } catch (exc) {
            if (exc.name == 'HttpError' && exc.status == 404) {
              return null;
            } else {
              throw exc;
            }
          }
        }
        after = await getVersion(context.payload.after);
        ref = `refs/tags/v${after}`
        is_main = context.payload.ref === `refs/heads/${context.payload.repository.default_branch}`

        // a tag matching the version was just pushed
        let release = context.payload.ref == ref;
        if (release) {
          console.log(`Tag v${after} pushed (${context.sha})`);
        }
        // the version on the default branch changed; create a tag
        if (!release && is_main) {
          before = await getVersion(context.payload.before);
          if (before !== after) {
            console.log(`Version bumped: ${before} -> ${after}`);
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref,
                sha: context.sha
              });
              console.log(`Tag v${after} created (${context.sha})`);
              release = true;
            } catch (exc) {
              // tag already existed
              if (exc.name == 'HttpError' && exc.status == 422) {
                console.log(`Skipping publish (tag v${after} already exists)`);
                release = false;
              } else {
                throw exc;
              }
            }
          } else {
            console.log(`Skipping publish (version is still ${before})`);
          }
        } else if (!is_main) {
          console.log(`Skipping publish (push to ${context.payload.ref} != refs/heads/${context.payload.repository.default_branch})`);
        }
        return release;