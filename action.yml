name: 'Poetry tag version bump'
description: 'Detect version bump and tag the commit'
inputs:
  base_branches:
    description: regex for base branches to create releases from
    default: ""
  release_prefix:
    description: tag prefix to treat as release
    default: "v"
outputs:
  should_publish: # id of output
    description: 'New tag created'
    value: ${{ toJSON(steps.check.outputs.result.release) }}
  version:
    description: name of tag
    value: ${{ toJSON(steps.check.outputs.result.version) }}
  result:
    value: ${{ steps.check.outputs.result }}
runs:
  using: 'composite'
  steps:
  - uses: actions/setup-node@v3
    with:
      node-version: 20
  - run: npm install toml@3.0.0
    shell: bash
  - name: Ensure tag for version bump
    id: check
    uses: actions/github-script@v6
    with:
      result-encoding: json
      script: |
        const toml = require('toml')
        async function getVersion(ref) {
          try {
            response = await github.rest.repos.getContent({
              repo: context.repo.repo,
              owner: context.repo.owner,
              path: 'pyproject.toml',
              ref: ref
            });
            return toml.parse(Buffer.from(response.data.content, 'base64').toString())
              .tool
              .poetry
              .version;
          } catch (exc) {
            if (exc.name == 'HttpError' && exc.status == 404) {
              return null;
            } else {
              throw exc;
            }
          }
        }
        after = await getVersion(context.payload.after);
        ref = `refs/tags/${{ inputs.tag_prefix }}${after}`
        const base_branch_pattern = "${{ inputs.base_branches }}"
        target_pattern = new RegExp(`^refs/heads/(?<target>${context.payload.repository.default_branch}|(?:${{ inputs.base_branches }}))$`)
        is_target = target_pattern.exec(context.payload.ref)

        // a tag matching the version was just pushed
        let release = Boolean(context.payload.ref == ref);
        if (release) {
          console.log(`Tag ${{ inputs.tag_prefix }}${after} pushed (${context.sha})`);
        }
        // the version on the default branch changed; create a tag
        if (!release && is_target) {
          before = await getVersion(context.payload.before);
          if (before !== after) {
            console.log(`Version bumped on ${is_target.groups.target}: ${before} -> ${after}`);
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref,
                sha: context.sha
              });
              console.log(`Tag v${after} created (${context.sha})`);
              release = true;
            } catch (exc) {
              // tag already existed
              if (exc.name == 'HttpError' && exc.status == 422) {
                console.log(`Skipping publish (tag v${after} already exists)`);
                release = false;
              } else {
                throw exc;
              }
            }
          } else {
            console.log(`Skipping publish (version is still ${before})`);
          }
        } else if (!is_target) {
          console.log(`Skipping publish (push to ${context.payload.ref} !~ ${target_pattern}`);
        }
        return {release: release, ref: ref, version: after};